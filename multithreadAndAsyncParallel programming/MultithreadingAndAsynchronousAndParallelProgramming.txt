MultiTasking : concept of running multiple appication at a time.
               ex. Windows Operating System.

 threads     :Every Application use the proccess to run and each process use threads to run it.
             : Every process have atleast one thread which is called main thread.. a single process can have multiple thread.
             : by Default thread can not contain any name,.

CurrentTread : It retrives the current running threading.

IsAlive      : Its retrvie the current state of executing thread. it is running returns true 

Name         : name of thread.

Priority     : It obtain the shceduling priority of thread by defualt it is normal only.
               Normal , above normal, hieghest, below normal , lowest.

Interrupt() : To inrerrupt thread which is in the Wait Sleep Join State.

Join()      : TO block the thread until aonther thread is completed or terminated.

Resume()    : To resume the thread which has been suspended erilear.

Sleep()     : To block the current thread for the specified time period.

SpinWait()  : To make thread wait the number of time specified in the iteration parameter.

start()     : to Start the thread.

Suspend()   : To suspend the thread.

Abort()     : TO begin the process of termnating the thread.

Locking     : protecting shared resource from concurrent access. use lock keyword or Interlocked.increment() Interlocked better performance

monitor     : protecting shared resource from concurrent access. It has notification mechanishim. we can use try catch and finaly

Monitor.wait() : A thread wait wait for other thread to notify.

Monitor.pulse() :  A thread notify other thread.

Monitor.pulseAll() :  A thread notifies all other thread within process. 

IsBackground() : To get or set or check the thread is background thread or not.

IsThreadPoolThread() : To get or set if thread is belogs to managed thread pool.


Thread Life Cycle : Ready / Unstarted ===> RunningState ===> Sleep / Not running state ===> Suspened ===> Dead

Thread Pooling    : Thread pooling is the process of creating a collection of threads during the initialization of a multithreaded application, 
                    and then reusing those threads for new tasks as and when required, instead of creating new threads.
                    Then every process has some fixed number of threads depending on the amount of memory available, 
                    those threads are the need of the application but we have freedom to increase the number of threads.
                    Every thread in the pool has a specific given task.
                    The thread returns to the pool and waits for the next assignment when the given task is completed.


Drawbacks of Single-Threaded :  if we have to do the more than one task by using single thread,
                                then 2nd task have to wait for its execution, 1st thread to complete. 
                                
Multithreading advantage : if 1st task is taking to excecute then that time will not wasted 2nd task will start excuting,
                           time and cpu utilizaion will be good.

ThreadStart              : Thread Constructor which is a delegate
Mutex                    : Mutex is a synchronization primitive that grants exclusive access to the shared resource to only one thread. 
Semaphore                :  if we want more control over the number of external threads that can access our application code, 
                            then we need to use the Semaphore class in C#. 


***************** Why do we need Semaphore as we already have Lock, Monitor, and Mutex in C#? *********************

Like Lock, Monitor, and Mutex the Semaphore is also used to provide thread safety in C# Multi-threaded Applications.
The Lock and Monitors are basically used to provide thread safety for threads that are generated by the application itself i.e. Internal Threads.
On the other hand, Mutex ensures thread safety for threads that are generated by external applications i.e. External Threads.
Using Mutex, only one external thread can access our application code at any given point in time and this we have already seen in our previous article.
But, if we want more control over the number of external threads that can access our application code, 
then we need to use the Semaphore class in C#. 



DeadLock                 : A deadlock is a situation where an application locks up because two or more activities are waiting for each other to finish. 
                           This occurs in multithreading software where a shared resource is locked by one thread and another thread is waiting to access it 
                           and something occurs so that the thread holding the locked item is waiting for the other thread to execute.

DeadLock Solution        : Use Lock in proper order, interlock (interlock is good in performance)
                           - Use Moniter.tryEnter  
                           - Use Mutex

Thread Pooling           : Thread pooling is a process of creating collection of thread while initalization of a multithreaded application.
                           then use those thread for new task when it required insteat creating new thred.

Chaining Task           : ContinueWith => want to start one operation after the completion of another operation, then you can use a technique known as asynchronous operation chaining or task chaining.
Retrun Type of Async    : Void, Task, Task<T>

Parallel Programming    : Is a programing where in the execution flow of the application execution will broken into peices will done at same time.
                        : Parallel Programming is a concept where multiple calculation or prcoess executions are done at same time.
                        
Data parallelism        : Parallel.For , Parallel.ForEach these for loops use multiple thread execution while execution. 
                          Simple for loop use single thread while execution.

Task Parallelism        : Parallel.Invoke

Parallel option class   : This class provides options to limit the number of concurrenlty executing loop methods.
Parallel Invoke         :  
MaxDegreeOfParallelism  : The MaxDegreeOfParallelism property affects the number of concurrent operations run by Parallel method calls that are passed this ParallelOptions instance.
                          A positive property value limits the number of concurrent operations to the set value. If it is -1,
                          there is no limit on the number of concurrently running operations.

Task Vs Asyn Await      : Task is used for independ task execution async and await is used for depenedend task execution 




